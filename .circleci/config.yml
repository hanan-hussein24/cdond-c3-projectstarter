version: 2.1



commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
       stack-name:
         description: Name of the CloudFormation stack
         type: string
         default: ""
    steps:
      - run:
          name: Desstroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack-name>>
          


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
       SUCCESS:
         description: Test successful migration
         type: string
         default: ""
    steps:
      - run:
          name: Revert migrations
          when: on_fail          
          command: |

            if(( $SUCCESS=="1" )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]    
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical


  deploy-infrastructure:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            yum install -y openssh 
            yum install -y openssh-clients

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-1 --output text >> .circleci/ansible/inventory.txt
              
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 

      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
        environment:
          ANSIBLE_HOST_KEY_CHECKING: "no"
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible openssh-client
            pip install awscli 

      - add_ssh_keys:
          fingerprints: ["c8:92:15:8e:d0:ac:7d:f0:f4:12:87:00:cb:e5:70:21"]
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -vvvv -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

      
  run-migrations:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm zip
            pip install awscli 

      - run:
          name: Run migrations
          command: |          
            cd backend
            npm install

            npm run migrations > migrations_dump.txt
      # Run and save the migration output
      

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then

                curl https://kvdb.io/SyLHeNDmDNrwJT9kwTeiMc/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                curl --insecure https://Kvdb.io/Xhttps://kvdb.io/SyLHeNDmDNrwJT9kwTeiMc/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}
                echo "1" > ~/project/.circleci/migration-success.txt
            fi  
      # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
      #Here's where you will add some code to rollback on failure
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/migration-success.txt
      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"       
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
   

  deploy-frontend:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm zip
            pip install awscli 
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --region us-east-1 --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env 
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"       
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

      - revert-migrations:
          SUCCESS: "cat ~/project/.circleci/migration-success.txt"
      # Here's where you will add some code to rollback on failure      
            
  deploy-backend:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout

      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update tar gzip nodejs npm ansible openssh-client
    # pip install awscli 

      #- add_ssh_keys:
          # fingerprints: ["c8:92:15:8e:d0:ac:7d:f0:f4:12:87:00:cb:e5:70:21"]
      # - attach_workspace:
      #     at: ~/

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..           
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"       
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          SUCCESS: "cat ~/project/.circleci/migration-success.txt"    


  
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
